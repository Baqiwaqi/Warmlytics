import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { CurrentInsulationArray, NewInsulationArray } from "~/utils/helpers";


const Home: NextPage = () => {

   const [gasPrice, setGasPrice] = useState(1.45);
   const [squeareGasUsage, setSquareGasUsage] = useState(7.5);
   // Current Situation
   const [surfaceArea, setSurfaceArea] = useState(10);
   const [stpr, setStpr] = useState(1);
   const [matCode, setMatCode] = useState(1);
   const [currentRC, setCurrentRC] = useState(CurrentInsulationArray[0]?.rc);
   const [gasYearlyCost, setGasYearlyCost] = useState(squeareGasUsage * surfaceArea / (CurrentInsulationArray[0]?.rc || 0) * stpr);

   // New Situation
   const [newMatCode, setNewMatCode] = useState(1);
   const [rVerb, setRVerb] = useState(NewInsulationArray[0]?.rVerb);
   const [gasYearImprovement, setGasYearImprovement] = useState(squeareGasUsage * surfaceArea / (NewInsulationArray[0]?.rVerb || 0) * stpr);
   const [newMaterialCost, setNewMaterialCost] = useState(NewInsulationArray[0]?.cost || 0);

   const handleMatCodeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
      setMatCode(Number(e.target.value));
      const mappedRc = CurrentInsulationArray.find((item) => item.id === Number(e.target.value))?.rc;
      setCurrentRC(mappedRc || 0);
      // calulation = squeareGasUsage * surfaceArea / rc * stpr
      const cost = squeareGasUsage * surfaceArea / (mappedRc || 0) * stpr
      setGasYearlyCost(cost);
   };

   const handleNewMatCodeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
      setNewMatCode(Number(e.target.value));

      const rVerb = NewInsulationArray.find((item) => item.id === Number(e.target.value))?.rVerb;
      setRVerb(rVerb || 0);

      const nMaterialCost = NewInsulationArray.find((item) => item.id === Number(e.target.value))?.cost;
      setNewMaterialCost(nMaterialCost || 0);

      const cost = squeareGasUsage * surfaceArea / (rVerb || 0) * stpr
      setGasYearImprovement(cost);
   };

   const [gasSaving, setGasSaving] = useState(0);
   const [resultSavings, setResultsSavings] = useState(0);
   const [calculatedCost, setCalculatedCost] = useState(0);
   const [tvt, setTvt] = useState(0);
   const [showResults, setShowResults] = useState(false);

   const calculateResults = () => {
      const gasSaving = gasYearlyCost - gasYearImprovement;
      setGasSaving(gasSaving);

      const resSavings = gasSaving * gasPrice;
      setResultsSavings(resSavings);

      const calculatedCost = newMaterialCost * surfaceArea;
      setCalculatedCost(calculatedCost);

      const tvt = calculatedCost / resSavings;
      setTvt(tvt);

      setShowResults(true);
   };

   return (
      <>
         <Head>
            <title>Warmlytics</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <main className="flex min-h-screen flex-col items-center justify-center bg-base-300">
            <div className="container card shadow-xl bg-base-100 flex flex-col  p-8">
               <h1 className="text-2xl font-extrabold tracking-tight">
                  Isolatie Check
               </h1>
               <div className="flex space-x-4">
                  <div className="form-control w-full max-w-xs">
                     <label className="label">
                        <span className="label-text">Gas Prijs</span>
                     </label>
                     <input
                        type="number"
                        step={0.01}
                        value={gasPrice}
                        onChange={(e) => {
                           setGasPrice(parseFloat(e.target.value));
                        }}
                        className="input input-bordered input-sm w-full max-w-xs"
                     />
                  </div>
                  <div className="form-control w-full max-w-xs">
                     <label className="label">
                        <span className="label-text">Gas gebruik m3/m2</span>
                     </label>
                     <input
                        type="number"
                        step={0.01}
                        value={squeareGasUsage}
                        onChange={(e) => setSquareGasUsage(parseFloat(e.target.value))}
                        className="input input-bordered input-sm w-full max-w-xs"
                     />
                  </div>

               </div>
               <div className="flex space-x-4">
                  <div className="form-control w-full max-w-xs">
                     <label className="label">
                        <span className="label-text">Oppervlakte</span>
                     </label>
                     <input
                        type="number"
                        value={surfaceArea}
                        onChange={(e) => setSurfaceArea(parseFloat(e.target.value))}
                        className="input input-bordered input-sm w-full max-w-xs"
                     />
                  </div>
                  <div className="form-control w-full max-w-xs">
                     <label className="label">
                        <span className="label-text">Stookpunten</span>
                     </label>
                     <input
                        type="number"
                        value={stpr}
                        onChange={(e) => setStpr(parseFloat(e.target.value || "1"))}
                        className="input input-bordered input-sm w-full max-w-xs"
                     />
                  </div>

               </div>

               <span className="text-2xl font-extrabold tracking-tight mt-4">Huidige Situatie</span>
               <div className="flex space-x-4">
                  <div className="form-control w-full max-w-xs">
                     <label className="label">
                        <span className="label-text">Materiaal</span>
                     </label>
                     <select
                        value={matCode}
                        onChange={(e) => handleMatCodeChange(e)}
                        className="select select-bordered select-sm w-full max-w-xs">
                        {CurrentInsulationArray.map((item) => (
                           <option key={item.id} value={item.id}>
                              {item.name}
                           </option>
                        ))}
                     </select>
                  </div>
                  <div className="form-control w-full max-w-xs">
                     <label className="label">
                        <span className="label-text">RC waarde</span>
                     </label>
                     <input
                        value={currentRC}
                        className="input input-bordered input-sm w-full max-w-xs"
                        disabled
                     />
                  </div>
                  <div className="form-control w-full max-w-xs">
                     <label className="label">
                        <span className="label-text">Gas / Jaar</span>
                     </label>
                     <input
                        value={gasYearlyCost}
                        className="input input-bordered input-sm w-full max-w-xs"
                        disabled
                     />
                  </div>
               </div>
               <span className="text-2xl font-extrabold tracking-tight mt-4">Nieuwe Situatie</span>
               <div className="flex space-x-4">
                  <div className="form-control w-full max-w-xs">
                     <label className="label">
                        <span className="label-text">Materiaal</span>
                     </label>
                     <select
                        value={newMatCode}
                        onChange={(e) => handleNewMatCodeChange(e)}
                        className="select select-bordered select-sm w-full max-w-xs">
                        {NewInsulationArray.map((item) => (
                           <option key={item.id} value={item.id}>
                              {item.name}
                           </option>
                        ))}
                     </select>
                  </div>
                  <div className="form-control w-full max-w-xs">
                     <label className="label">
                        <span className="label-text">RC waarde</span>
                     </label>
                     <input
                        value={rVerb}
                        className="input input-bordered input-sm w-full max-w-xs"
                        disabled
                     />
                  </div>
                  <div className="form-control w-full max-w-xs">
                     <label className="label">
                        <span className="label-text">Gas / Jaar</span>
                     </label>
                     <input
                        value={gasYearImprovement}
                        className="input input-bordered input-sm w-full max-w-xs"
                        disabled
                     />
                  </div>
               </div>
               {showResults && (
                  <>
                     <span className="text-2xl font-extrabold tracking-tight mt-4">Resultaat</span>
                     <div className="flex space-x-4">
                        <div className="form-control w-full max-w-xs">
                           <label className="label">
                              <span className="label-text">Besparing gas</span>
                           </label>
                           <input
                              value={gasSaving.toFixed(2)}
                              className="input input-bordered input-sm w-full max-w-xs"
                              disabled
                           />
                        </div>
                        <div className="form-control w-full max-w-xs">
                           <label className="label">
                              <span className="label-text">Besparing</span>
                           </label>
                           <input
                              value={resultSavings.toFixed(2)}
                              className="input input-bordered input-sm w-full max-w-xs"
                              disabled
                           />
                        </div>
                        <div className="form-control w-full max-w-xs">
                           <label className="label">
                              <span className="label-text">Kosten</span>
                           </label>
                           <input
                              value={calculatedCost}
                              className="input input-bordered input-sm w-full max-w-xs"
                              disabled
                           />
                        </div>
                        <div className="form-control w-full max-w-xs">
                           <label className="label">
                              <span className="label-text">TVT</span>
                           </label>
                           <input
                              value={tvt.toFixed(2)}
                              className="input input-bordered input-sm w-full max-w-xs"
                              disabled
                           />
                        </div>
                     </div>
                  </>
               )}
               <button onClick={calculateResults} className="btn btn-primary btn-sm mt-4">
                  {showResults ? "Bereken opnieuw" : "Resultaat Bereken"}
               </button>
            </div>
         </main>
      </>
   );
};

export default Home;
